{"version":3,"sources":["../src/extension.js"],"names":["activate","deactivate","path","os","fs","vscode","minimatch","log","console","_isDirectory","file","stat","statSync","isDirectory","createBreadCrumbItemsFromFile","fileName","callback","selectedPath","homeDir","homedir","workspaceDirs","workspace","workspaceFolders","homeFound","workspaceFound","selectedWorkspaceName","selectedWorkspaceAbs","includes","relative","map","dir","name","uri","wsd","breadcrumbItems","parsedFileName","parse","aggregatedPath","push","root","split","sep","filter","a","part","join","base","reverse","NavigationQuickPickMenu","excludePatterns","fileSelectedCallback","dirSelectedCallback","_fileCallback","_dirCallback","_excludePatterns","makeRe","pattern","_currentCancellationToken","undefined","abs","showDir","dirs","files","readdirSync","some","p","test","f","forEach","label","detail","CancellationTokenSource","window","showQuickPick","sort","concat","then","selected","dispose","MultipleStatusBarItem","align","_basePriority","_subItems","_subItemCommandHandles","_sbAlign","StatusBarAlignment","Left","items","num","text","hint","callable","args","r_item","createStatusBarItem","command","command_handle","commands","registerCommand","tooltip","item","show","hide","handle","StatusBarBreadCrumbExtension","_statusBarItem","_navigationMenu","context","COMMANDS_AGGREGATED","command_name","command_func","bind","configuration","getConfiguration","onDidChangeConfiguration","get","_openFileInEditor","newDocCallback","_onNewTextEditor","onDidChangeActiveTextEditor","activeTextEditor","info","openTextDocument","showTextDocument","doc","ViewColumn","Active","textEditor","document","isUntitled","setItems","_showSameLevelFilesQuickMenu","COMMAND_SHOW_SAME_LEVEL_FILES_FOR_GIVEN","prototype","workspaceState","_id","this_extension","subscriptions"],"mappings":"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","file":"extension.js","sourcesContent":["'use strict';\n\n// The module 'vscode' contains the VS Code extensibility API\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport * as fs from \"fs\";\nimport * as vscode from \"vscode\";\nimport * as minimatch from \"minimatch\";\nimport {Disposable} from \"vscode\";\n\n\nlet log = console;\n\n\n// utils\nfunction _isDirectory(file) {\n    let stat = fs.statSync(file);  // probably slow\n    return stat.isDirectory();\n}\n\nfunction createBreadCrumbItemsFromFile(fileName, callback) {\n    // this wall of code full of shit but do exactly what it should\n    // no power to refactor it\n    let selectedPath = fileName;\n    let homeDir = os.homedir();\n    let workspaceDirs = vscode.workspace.workspaceFolders;\n    let homeFound = false;\n    let workspaceFound = false;\n    let selectedWorkspaceName = null;\n    let selectedWorkspaceAbs = null;\n\n    // find intersections with such root dirs as home and workspace\n    homeFound = fileName.includes(fileName);\n    if (homeFound) {\n        selectedPath = path.relative(homeDir, fileName);\n    }\n    for (let [name, wsd] of workspaceDirs.map(dir => [dir.name, dir.uri.path])) {\n        workspaceFound = fileName.includes(wsd);\n        if (workspaceFound) {\n            selectedPath = path.relative(wsd, fileName);\n            workspaceFound = true;\n            selectedWorkspaceName = name;\n            selectedWorkspaceAbs = wsd;\n            break;\n        }\n    }\n    \n    // create list of breadcrumb items\n    let breadcrumbItems = [];\n    let parsedFileName = path.parse(selectedPath);\n    let aggregatedPath = null;\n    \n    // push root found node\n    if (workspaceFound) {\n        breadcrumbItems.push(\n            [\n                `$(file-submodule) ${selectedWorkspaceName}`, 'Workspace root',\n                callback, selectedWorkspaceAbs\n            ]\n        );\n        aggregatedPath = selectedWorkspaceAbs;\n    } else if (homeFound) {\n        breadcrumbItems.push(\n            [`$(home)`, 'Home', callback, homeDir]\n        );\n        aggregatedPath = homeDir;\n    } else {\n        breadcrumbItems.push(\n            [` / `, 'Project root', callback, parsedFileName.root]\n        );\n        aggregatedPath = parsedFileName.root;\n    }\n    \n    // push itermediate parts\n    for (\n        let part of parsedFileName.dir.split(\n            path.sep\n        ).filter(a => !!a)\n    ) {\n        aggregatedPath = path.join(aggregatedPath, part);\n        breadcrumbItems.push(\n            [\n                `$(chevron-right)\\t${part}`, `Folder ${part}`,\n                callback, aggregatedPath\n            ]\n        )\n    }\n    breadcrumbItems.push(\n        [\n            `$(chevron-right)\\t${parsedFileName.base}`, 'Current file', \n            () => {}, path.join(aggregatedPath, parsedFileName.base)\n        ]\n    )\n\n    return breadcrumbItems.reverse();\n}\n\n\n/**\n * Quick-pick navigation menu\n */\nclass NavigationQuickPickMenu extends Disposable {\n    /**\n     * Create menu with callbacks\n     * @param {*} fileSelectedCallback \n     * @param {*} dirSelectedCallback if not set will be called recursively\n     */\n    constructor(excludePatterns, fileSelectedCallback, dirSelectedCallback) {\n        super();\n        this._fileCallback = fileSelectedCallback;\n        this._dirCallback = dirSelectedCallback;\n        this._excludePatterns = excludePatterns.map(\n            pattern => minimatch.makeRe(pattern)\n        );\n        this._currentCancellationToken = null;\n        if (dirSelectedCallback == undefined || dirSelectedCallback === null)\n            this._dirCallback = (abs, name) => this.showDir(abs);\n    }\n\n    /**\n     * Create menu for directory\n     * @param {*} dir \n     */\n    showDir(dir) {\n        // list current dir files splitting them into files and directories\n        let dirs = [];\n        let files = [];\n        fs.readdirSync(dir).filter(\n            f => !this._excludePatterns.some(p => p.test(f))\n        ).forEach(\n            name => {\n                let abs = path.join(dir, name);\n                if (_isDirectory(abs))\n                    dirs.push({label: `$(file-directory) ${name}`, detail: abs});\n                else\n                    files.push({label: name, detail: abs});\n            }\n        )\n        // show menu items, on then call appropriate callback\n        this._currentCancellationToken = new vscode.CancellationTokenSource();\n        vscode.window.showQuickPick(\n            dirs.sort().concat(files.sort())\n        ).then(\n            selected => {\n                this._currentCancellationToken = null;\n                if (selected == undefined)\n                    return;\n                \n                if (_isDirectory(selected.detail))\n                    this._dirCallback(selected.detail, selected.name);\n                else\n                    this._fileCallback(selected.detail, selected.name);\n            }\n        );\n    }\n\n    dispose() {\n        if (this._currentCancellationToken) {\n            this._currentCancellationToken.dispose();\n            this._currentCancellationToken = null;\n        }\n    }\n}\n\n/**\n * Class is untended to group and control multiple status-bar items at once\n *  providing multiple control methods like \n *  @see [show](#MultipleStatusBarItem.show) and @see [hide](#MultipleStatusBarItem.hide)\n */\nclass MultipleStatusBarItem extends Disposable {\n    constructor(align) {\n        super();\n        this._basePriority = -50;\n        this._subItems = [];\n        this._subItemCommandHandles = [];\n        this._sbAlign = align || vscode.StatusBarAlignment.Left;\n    }\n\n    /**\n     * Set group of status-bar items strictly aligned together \n     * @param items \n     * list of tuples in form (item_label, callable, callable_args)\n     */\n    setItems(items) {\n        this.dispose();\n\n        let num = 0;\n        for (let [text, hint, callable, args] of items) {\n            let r_item = vscode.window.createStatusBarItem(\n                this._sbAlign, this._basePriority + num++\n            );\n\n            let command = 'extension._internalCommand' + num;\n            let command_handle = vscode.commands.registerCommand(\n                command, () => callable(args)\n            );\n            \n            r_item.text = text;\n            r_item.command = command;\n            r_item.tooltip = hint;\n\n            this._subItems.push(r_item);\n            this._subItemCommandHandles.push(command_handle);\n        }\n    }\n\n    /**\n     * Show elements\n     */\n    show() {\n        for (let item of this._subItems) {\n            item.show();\n        }\n    }\n    \n    /**\n     * Hide elements\n     */\n    hide() {\n        for (let item of this._subItems) {\n            item.hide();\n        }\n    }\n\n    dispose() {\n        for (let item of this._subItems) {\n            item.dispose();\n        }\n        for (let handle of this._subItemCommandHandles) {\n            handle.dispose();\n        }\n    }\n}\n\n\n/**\n * Extension entry point with global state\n */\nclass StatusBarBreadCrumbExtension extends Disposable {\n    constructor() {\n        super();\n        this._statusBarItem = null;\n        this._navigationMenu = null;\n    }\n\n    activate(context) {\n        // Register commands\n        for (let [command_name, command_func] of StatusBarBreadCrumbExtension.COMMANDS_AGGREGATED) {\n            vscode.commands.registerCommand(\n                command_name, command_func.bind(this)\n            );\n        }\n\n        // Get configuration\n        let configuration = vscode.workspace.getConfiguration('status-bar-breadcrumb');\n\n        // Reload navigation menu on change\n        vscode.workspace.onDidChangeConfiguration(\n            () => this._navigationMenu.dispose()\n        );\n\n        // Create status bar item\n        this._statusBarItem = new MultipleStatusBarItem();\n\n        // Create navigation menu\n        this._navigationMenu = new NavigationQuickPickMenu(\n            configuration.get('filesNavigationMenuExcludePatterns'), this._openFileInEditor\n        );\n        \n        // Subscribe for current document changed events\n        let newDocCallback = this._onNewTextEditor;\n        vscode.window.onDidChangeActiveTextEditor(newDocCallback.bind(this));\n\n        // Call active editor changed manually first time\n        this._onNewTextEditor(vscode.window.activeTextEditor);\n    }\n\n    dispose() {\n        this._statusBarItem.dispose();\n        this._navigationMenu.dispose();\n    }\n\n    // private\n    _showSameLevelFilesQuickMenu(dir) {\n        log.info('Showing quick open menu for ' + dir);\n        \n        // show directory in menu\n        this._navigationMenu.showDir(dir);\n    }\n\n    _openFileInEditor(fileName) {\n        log.info('Opening file in current editor ' + fileName)\n\n        // open document at current view column and show it\n        vscode.workspace.openTextDocument(fileName).then(\n            doc => vscode.window.showTextDocument(doc, vscode.ViewColumn.Active)\n        );\n    }\n\n    _onNewTextEditor(textEditor) {\n        // skip if there is no active editor or no document or it's untitled\n        if (!textEditor || !textEditor.document || textEditor.document.isUntitled) {\n            this._statusBarItem.setItems([]);\n            return;\n        }\n\n        let document = textEditor.document;\n\n        // log event\n        log.info('new document opened ' + document.fileName);\n\n        // set current statusbar item text and show it\n        this._statusBarItem.setItems(\n            createBreadCrumbItemsFromFile(\n                document.fileName, this._showSameLevelFilesQuickMenu.bind(this)\n            )\n        );\n        this._statusBarItem.show();\n    }\n}\n\n// There is no static attributes *facepalm.jpg*\n// Aggregated list of needful commands\nStatusBarBreadCrumbExtension.COMMAND_SHOW_SAME_LEVEL_FILES_FOR_GIVEN = 'status-bar-breadcrumb.showSameLevelFilesForGiven';\nStatusBarBreadCrumbExtension.COMMANDS_AGGREGATED = [\n    [\n        StatusBarBreadCrumbExtension.COMMAND_SHOW_SAME_LEVEL_FILES_FOR_GIVEN,\n        StatusBarBreadCrumbExtension.prototype._showSameLevelFilesQuickMenu\n    ]\n];\n\n\n// extension activate method\nexport function activate(context) {\n    log.info('extension ' + context.workspaceState._id + ' has been initialized');\n\n    // Create and activate extension instance which is disposable, so deactivate isn't needed\n    let this_extension = new StatusBarBreadCrumbExtension();\n    this_extension.activate(context);\n    // Sub for dispose\n    context.subscriptions.push(this_extension);\n}\n\n// deactivate method\nexport function deactivate() {\n\n}\n"]}